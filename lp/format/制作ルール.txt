--【LPのフォーマットを使用して制作する場合の流れ】--

1)[lp_format]ファイルを複製して名称変更し新規保存


2)SEOの設定

・titelタグ内を今回のLPタイトルに変更
・meta keyword内の関連ワード変更
・meta description変更

3)基本的には使用するファイルは以下。これらを編集していく。

・index.html
・custom.css

(sassを使用するかたはcustom.sassファイルを編集)


　(保留)
　　⇨中身があまりないindex.htmlと型をたくさんおいたhtmlをつくる・・？

　　⇨時短になるようなフォーマットは欲しい


4)index.htmlを編集

5)cssをPCサイズで編集

6)レスポンシブ対応するようにブレイクポイントのcssを追加

7)テストサーバーにアップして確認

8)配信設定




--【コーディングの共通認識】--

■PCファーストで実装する(2024年時点)

カナミックのサイトはPCのアクセスが多いためPCファーストでのまず実装。

下にタブレット、スマホのためのCSSを書いていく。



■命名規則

・英語を使用する
----------------

・短縮形の使用は極力避ける
-----------------------------
例)ボタンを `btn` とせず `button` とするなど。

・原則単数形
-----------------------------
名前は原則的に単数形を採用する。
OK) class="button-group"　NG) button-group



■コメントについて
  
必要な場所に明確なコメントを記述し、他の人の理解を促進する

(保留)区切りに使用するコメントのスタイル



■ブラウザサポート

・サイトは以下のブラウザでの動作確認をベースとする
-----------------------------------------------------
PC) Microsoft Edge、Google Chrome、Safari、Firefox

SP)iPhone - Safari、Android - Google Chrome



(保留)

■ブレイクポイントについて

・ sp / tab / pcの3パターンでデザインを調整する
---------------------------------------------------
必要がなければフォーマットの３つのブレイクポイントの数値はいじらない。
sassファイル内のmixin設定をを使用しているため、変更する場合は
breakpoint.scssの数値を変更する。
一部で追加のブレイクポイントが必要な場合は必要な場合は加筆する


・ブロック要素ごとにブレイクポイントを記入する
---------------------------------------------------
NG例：

.cta {width: 100px;}

.btn {width: 50px;}
.
.

@media only screen and (max-width: 1400px) {

	.cta {width: 90px;}
	.btn {width: 40px;}
}

@media only screen and (max-width: 1200px) {

	.cta {width: 80px;}
	.btn {width: 30px;}
}

OK例：(.ctaに関する記述をまとめる)


.cta {width: 100px;}

@media only screen and (max-width: 1400px) {
	width: 90px;
}

@media only screen and (max-width: 1200px) {
	width: 80px;}




--【htmlについて】--


■html統一ルール2024年時点

・DOCTYPE宣言
----------------
HTML5を使用し先頭には<!DOCTYPE html>を宣言する。

<!DOCTYPE html>


・文字エンコーディング
----------------
UTF-8を使用。

<meta charset="utf-8">


・タグの書式
----------------
自己終了タグは<br>のようにスラッシュ無しで統一。

OK) <br>   NG) <br />


・属性の引用符
----------------
属性の値はダブルクォート（" "）で囲みます。シングルクォート（’）は利用しない。

OK
<a href="abc.html">abcへのリンク</a>

NG
<a href='abc.html'>abcへのリンク</a>


・HTML上でスタイリングを行わない
--------------------------------
HTML内に直接色の命令を書くとCSSの邪魔になるため極力避ける。


・セマンティックマークアップの利用を推奨。
--------------------------------
マークアップの際は、<header>, <nav>, <article>など
意味のあるセマンティックなタグの利用を推奨。

/* Do */
<header>
 <h1>ページタイトル</h1>
 <nav>
   <ul>
     <li><a href="menu1">メニュー1</a></li>
     <li><a href="menu2">メニュー2</a></li>
     <li><a href="menu3">メニュー3</a></li>
   </ul>
  </nav>
</header>

/* Don't */
<div>
  <h1>ページタイトル</h1>
    <div>
     <ul>
	<li><a href="menu1">メニュー1</a></li>
	<li><a href="menu2">メニュー2</a></li>
	<li><a href="menu3">メニュー3</a></li>
     </ul>
    </div>
</div>


(保留)
・インデント
----------------
インデントは、スペース2つを利用します。


■大枠の構造

<!DOCTYPE html>
<html lang="ja">

<head>
  　アナリティクスタグ
</head>

<body #pagetop>
　　<main #main .main>
	<section .header-section>
	   <header>
	        <div .wrapper>
		    <h1>画像またはテキスト</h1>
		</div>	
	   </header>
	</section>
	<section .セクションごとのクラス名>
	         <div .wrapper></div>	
	</section>
　　</main>
　　<footer>
    　　<p .pageTop>ページ先頭へ</p>
　　　　<section .footer-section>会社ロゴ、Pマーク</section>
　　</footer>
</body>
</html>



--【cssについて】--

■css統一ルール2024年時点

・セレクタの指定
-------------------
主にclassを使い、IDは避ける。
また、特定のHTML要素を対象としてスタイルを適用する要素セレクタの乱用は避ける。



(保留)

・プロパティの順序
-------------------
アルファベット順や種類ごと（ポジション、ボックスモデル、文字スタイルなど）の順番
CSSはポジション、ボックスモデル、テキスト関連、背景、ボーダー、
その他のスタイルの順に記述する。


・単位
------------
レスポンシブデザインではrem、固定サイズではpxを使用する。


・カラーコード
-----------------
小文字で6文字形式を利用する。

/* Do */
.title {color: #ffffff;}

/* Don't */
.title {color: #fff;}



--【sassについて】--

・拡張子
-----------------
SassはSCSS形式を利用し拡張子は.scssとする。


(保留)
・BEM (MindBEMding)を参考とした命名規則
・ 変数の命名: カラー、フォント、ブレークポイントなどの変数の命名規則
・ミックスインと関数: 使用のルールや共通のミックスイン・関数の定義場所
・ネストの深さ: 最大の深さ
・ファイルとディレクトリ構造: ファイルの分割やディレクトリの構造、命名規則
・@import vs @use: Sassのバージョンに応じて、どの命令を使用するかを決定
・メディアクエリ: 変数を使ってブレークポイントを管理する方法などを決定


--【他の記載検討内容】--

仕様書にはレスポンシブ対応のブレークポイントや動作仕様、
アニメーション等の詳細も明記してあるとよい
ただ、ここを作り込むにも工数がかかり、
全体の工数を考えるとバランスが悪くなるため
最低限の認識が揃えられる資料で良いかもしれない

--【他の検討事項】--

・ 再利用可能なコンポーネントを中心に、SASSやCSSの変数、mixinなどを統一する。
・ リソースの管理
　　⇨画像やアイコンなどのリソースは一元的に管理したほうがいよい。
　　⇨必要に応じて、クラウドストレージや専用のディレクトリで管理できると理想的。
　　　例)GitHub
